<?php
/**
 * @file
 * Code for the walter_costbenefit feature.
 */

include_once 'walter_costbenefit.features.inc';
include_once 'walter_costbenefit.forms.inc';

/**
 * Implements hook_menu().
 */
function walter_costbenefit_menu() {
  $items = array();
  $items['cb/%costbenefit'] = array(
    'title callback' => 'walter_costbenefit_get_title',
    'title arguments' => array('view', 1),
    'page callback' => 'walter_costbenefit_view_entity',
    'page arguments' => array(1),
    'access callback' => 'costbenefit_access',
    'access arguments' => array(1),
  );
  $items['cb/%costbenefit/edit'] = array(
    'title callback' => 'walter_costbenefit_get_title',
    'title arguments' => array('edit', 1),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('walter_costbenefit_form', 1),
    'access callback' => 'costbenefit_access',
    'access arguments' => array(1),
    'file' => 'walter_costbenefit.forms.inc',
  );
  $items['cb/add'] = array(
    'title' => 'New Cost-Benefit Matrix',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('costbenefit_form', NULL),
    'access callback' => 'user_is_logged_in',
    'file' => 'walter_costbenefit.forms.inc',
  );
  // Pass box number as parameter to the add cb_matrix_item page.
  $items['cb/%costbenefit/add/%'] = array(
    'title callback' => '_costbenefit_get_box_label',
    'title arguments' => array(3),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('costbenefit_item_add_form', 1, 3),
    'access callback' => 'costbenefit_access',
    'access arguments' => array(1),
    'file' => 'walter_costbenefit.forms.inc',
  );
  $items['cb/%costbenefit/%costbenefit_item'] = array(
    'title' => 'Item',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('costbenefit_item_edit_form', 2),
    'access callback' => 'costbenefit_access',
    'access arguments' => array(1),
    'file' => 'walter_costbenefit.forms.inc',
  );
  $items['cb/%costbenefit/%costbenefit_item/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('costbenefit_item_delete_form', 2),
    'access callback' => 'costbenefit_access',
    'access arguments' => array(1),
    'file' => 'walter_costbenefit.forms.inc',
  );
  return $items;
}

/**
 * Implements hook_entity_info().
 */
function walter_costbenefit_entity_info() {
  $info = array();
  $info['costbenefit'] = array(
    'label' => t('Cost-Benefit'),
    'base table' => 'costbenefit',
    'entity keys' => array(
      'id' => 'cb_id',
      'label' => 'title',
    ),
    'entity class' => 'CostbenefitEntity',
    'uri callback' => 'entity_class_uri',
    'controller class' => 'CostbenefitEntityController',
    'module' => 'walter_costbenefit',
    'access callback' => 'walter_costbenefit_access',
  );
  $info['costbenefit_item'] = array(
    'label' => t('Cost-Benefit Item'),
    'base table' => 'costbenefit_item',
    'entity keys' => array(
      'id' => 'cb_item_id',
      'label' => 'title',
    ),
    'entity class' => 'CostbenefitItemEntity',
    'uri callback' => 'entity_class_uri',
    'controller class' => 'CostbenefitItemEntityController',
    'module' => 'walter_costbenefit',
    'access callback' => 'walter_costbenefit_item_access',
  );
  return $info;
}

/**
 * Menu autoloader for /costbenefit.
 */
function costbenefit_load($cb_id) {
  $entity = entity_load('costbenefit', array($cb_id));
  return array_pop($entity);
}

/**
 * Menu autoloader for /costbenefit_item.
 */
function costbenefit_item_load($cb_item_id) {
  $entity = entity_load('costbenefit_item', array($cb_item_id));
  return array_pop($entity);
}

/**
 * Implements hook_theme().
 */
function walter_costbenefit_theme($existing, $type, $theme, $path) {
  return array(
    'costbenefit_box' => array(
      'template' => 'costbenefit-box',
      'path' => drupal_get_path('module', 'walter_costbenefit') . '/theme',
      'variables' => array(
        'vars' => NULL,
        'add_form' => NULL,
      ),
    ),
    'costbenefit_list' => array(
      'template' => 'costbenefit-list',
      'path' => drupal_get_path('module', 'walter_costbenefit') . '/theme',
      'variables' => array(
        'list' => NULL,
        'add_form' => NULL,
      ),
    ),
  );
}


/**
 * Implements hook_services_resources().
 */
function walter_costbenefit_services_resources() {
  $resources = array();
  $resources['costbenefit'] = array(
    'operations' => array(
      'retrieve' => array(
        'help' => 'Retrieve a costbenefit.',
        'file' => array(
          'type' => 'inc',
          'module' => 'walter_costbenefit',
          'name' => 'resources/walter_costbenefit.resource'
        ),
        'callback' => '_walter_costbenefit_resource_retrieve',
        'args' => array(
          array(
            'name' => 'cb_id',
            'optional' => FALSE,
            'source' => array('path' => 0),
            'type' => 'int',
            'description' => 'The cb_id of the costbenefit to retrieve.',
          ),
        ),
        'access callback' => '_walter_costbenefit_resource_access',
        'access arguments append' => TRUE,
      ),
    ),
    'actions' => array(
      'add_item' => array(
        'help' => 'Add a cb_item',
        'file' => array(
          'type' => 'inc',
          'module' => 'walter_costbenefit',
          'name' => 'resources/walter_costbenefit.resource'
        ),
        'callback' => '_walter_costbenefit_resource_add_item',
        'args' => array(
          array(
            'name' => 'cb_id',
            'optional' => FALSE,
            'source' => array('data' => 'cb_id'),
            'type' => 'int',
            'description' => 'The cb_id of the costbenefit to add cb_item for.',
          ),
          array(
            'name' => 'title',
            'optional' => FALSE,
            'source' => array('data' => 'title'),
            'type' => 'string',
            'description' => 'The title of the cb_item to add.',
          ),
        ),
        'access callback' => '_walter_costbenefit_resource_access',
      ),
    ),
  );
  return $resources;
}

/**
 * Implements hook_user_load().
 *
 * Adds a property for the user's cb_id.
 */
function walter_costbenefit_user_load($users) {
  foreach ($users as $user) {
    $user->cb_id = walter_costbenefit_get_cb_id($user);
  }
}

/**
 * Implements hook_user_delete().
 */
function walter_costbenefit_user_delete($account) {
  // Find user's cb_id.
  $cb_id = walter_costbenefit_get_cb_id($account);
  // Delete all cb items from it.
  db_delete('costbenefit_item')
  ->condition('cb_id', $cb_id)
  ->execute();
  // Delete the cb.
  db_delete('costbenefit')
  ->condition('cb_id', $cb_id)
  ->execute();
}

/**
 * Process variables for entity.tpl.php.
 *
 * @see template_preprocess_entity in Entity API module.
 */
function walter_costbenefit_preprocess_entity(&$variables) {
  if ($variables['elements']['#entity_type'] == 'costbenefit' && $variables['view_mode'] == 'full') {
    // Enables costbenefit.tpl.php naming suggestion.
    $variables['theme_hook_suggestions'][] = 'costbenefit';
    $entity = $variables['elements']['#entity'];
  }
}

/**
 * Page callback for /costbenefit/ID.
 */
function walter_costbenefit_view_entity($entity) {
  return entity_view('costbenefit', array($entity->cb_id => $entity), 'full');
}

/**
 * Title callback for /costbenefit/ID.
 */
function walter_costbenefit_get_title($op, $entity) {
  if ($op == 'view') {
    return $entity->title;
  }
  return $op . ' ' . $entity->title;
}

/**
 * Access callback for costbenefit and costbenefit_item pages.
 */
function walter_costbenefit_access($op, $entity) {
  global $user;
  if ($user->uid == 1) {
    return TRUE;
  }
  return $user->uid == $entity->uid;
}

/**
 * Access callback for costbenefit and costbenefit_item pages.
 */
function walter_costbenefit_item_access($op, $entity) {
  global $user;
  if ($user->uid == 1) {
    return TRUE;
  }
  return $user->uid == $entity->uid;
}

/**
 * Implements hook_forms().
 */
function walter_costbenefit_forms($form_id, $args) {
  // For some reason, add_form_id kept interfering with the
  // node form for the page content type.  Quick fix.
  if ($form_id == 'page_node_form') {
    return;
  }
  $forms = array();
  $item_add_form_id = 'walter_costbenefit_item_add_form';
  $item_edit_form_id = 'walter_costbenefit_item_edit_form';
  if (strpos($item_add_form_id . '_', $form_id) === FALSE) {
    $forms[$form_id] = array('callback' => $item_add_form_id);
  }
  elseif (strpos($item_edit_form_id . '_', $form_id) === FALSE) {
    $forms[$form_id] = array('callback' => $item_edit_form_id);
  }
  return $forms;
}

/**
 * Implements hook_views_data().
 */
function walter_costbenefit_views_data() {
  // Define costbenefit table.
  $data['costbenefit']['table']['group'] = t('Costbenefit');
  $data['costbenefit']['table']['base'] = array(
    'field' => 'cb_id',
    'title' => t('Costbenefits'),
    'help' => t('Costbenefit table.'),
    'weight' => -10,
  );
  $data['costbenefit']['table']['join'] = array(
    'users' => array(
      'left_field' => 'uid',
      'field' => 'uid',
    ),
  );
  $data['costbenefit']['cb_id'] = array(
    'title' => t('Cb id'),
    'help' => t('Costbenefit cb_id.'),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
      'click sortable' => TRUE,
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );
  $data['costbenefit']['title'] = array(
    'title' => t('Title'),
    'help' => t('Costbenefit title.'),
    'field' => array(
      'handler' => 'views_handler_field',
      'click sortable' => TRUE,
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
  );
  $data['costbenefit']['uid'] = array(
    'title' => t('Uid'),
    'help' => t('User id.'),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
      'click sortable' => TRUE,
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
    'relationship' => array(
      'base' => 'users',
      'handler' => 'views_handler_relationship',
      'label' => t('Costbenefit Author'),
    ),
  );
  $data['costbenefit']['updated'] = array(
    'title' => t('Date updated'),
    'help' => t('Date updated.'),
    'field' => array(
      'handler' => 'views_handler_field_date',
      'click sortable' => TRUE,
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_date',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_date',
    ),
  );
  return $data;
}

/**
 * Gets logged in user's costbenefit cb_id.
 */
function walter_costbenefit_get_cb_id($account = NULL) {
  if ($account == NULL) {
    global $user;
    $account = $user;
  }
  return db_select("costbenefit", "cb")
    ->fields("cb", array("cb_id"))
    ->condition("uid", $account->uid)
    ->execute()
    ->fetchField();
}

/**
 * ------------------------------------------------------------
 * HELPERS
 * ------------------------------------------------------------
 */

/**
 * Returns the costbenefit box label based on given number $box.
 */
function _costbenefit_get_box_label($box, $plural = TRUE, $title = NULL) {
  $type = _costbenefit_get_box_type($box, $plural);
  $action = 'doing it';
  if ($box > 2) {
    $action = 'NOT doing it';
  }
  if ($title) {
    $title = ' ' . $title;
  }
  return $type . ' of ' . $action;
}

function _costbenefit_get_box_type($box, $plural = TRUE) {
  $type = 'Pro';
  // If box number is even:
  if ($box % 2 == 0) {
    $type = 'Con';
  }
  if ($plural) {
    $type .= 's';
  }
  return $type;
}

/**
 * Returns array of values to set the costbenefit_item type.
 */
function _costbenefit_get_type_options() {
  return array(
    0 => 'Short term',
    1 => 'Long term',
  );
}
