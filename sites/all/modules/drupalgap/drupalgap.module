<?php

/**
 * @file
 * A module to provide a bridge between Drupal websites and PhoneGap mobile
 * applications.
 */

/**
 * Implements hook_help().
 */
function drupalgap_help($path, $arg) {
  switch ($path) {
    case 'admin/help#drupalgap':
      // Show documentation URL.
      $doc_msg = t(
        'The online <a href="@doc_url">DrupalGap Documentation</a> contains
         more information on help topics.',
        array('@doc_url' => 'http://drupal.org/node/1603690')
      );
      return "<p>$doc_msg</p>";
      break;
  }
}

/**
 * Implements hook_permission().
 */
function drupalgap_permission() {
  return array(
    'administer drupalgap' => array(
      'title' => t('Administer DrupalGap'),
      'description' => t('Perform administration tasks for DrupalGap.'),
    ),
    'drupalgap get vocabularies' => array(
      'title' => t('Get Vocabularies'),
      'description' => t('Retrieve basic data about vocabularies.'),
    ),
    'drupalgap get terms' => array(
      'title' => t('Get Terms'),
      'description' => t('Retrieve basic data about vocabularies terms.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function drupalgap_menu() {
  $items = array();
  $items['admin/config/drupalgap'] = array(
    'title' => 'DrupalGap',
    'type' => MENU_NORMAL_ITEM,
    'description' => 'The status of DrupalGap.',
    'page callback' => 'drupalgap_status',
    'access arguments' => array('administer drupalgap'),
    'file' => 'drupalgap.pages.inc',
  );
  return $items;
}

/**
 * Implements hook_views_api().
 */
function drupalgap_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'drupalgap'),
  );
}

/**
 * Implements hook_ctools_plugin_api().
 */
function drupalgap_ctools_plugin_api($owner, $api) {
  if ($owner == 'services' && $api == 'services') {
    return array(
      'version' => 3,
      'file' => 'drupalgap.services.inc',
    );
  }
}

/**
* Implements hook_entity_info_alter().
*/
function drupalgap_entity_info_alter(&$entity_info) {
  // Add a DrupalGap view mode to nodes and users.
  $entity_info['node']['view modes']['drupalgap'] = array(
    'label' => t('DrupalGap'),
    'custom settings' => TRUE
  );
  $entity_info['user']['view modes']['drupalgap'] = array(
    'label' => t('DrupalGap'),
    'custom settings' => TRUE
  );
}

/**
 * Implements hook_services_resources_alter().
 */
function drupalgap_services_resources_alter(&$resources, &$endpoint) {
  // If the email_registration module is enabled, Override the normal user login
  // callback.
  if (module_exists('email_registration') && isset($resources['user']['actions']['login']['callback'])) {
    $resources['user']['actions']['login']['callback'] = 'drupalgap_email_registration_services_login';
  }
  // If the logintoboggan module is enabled, Override the normal user login
  // callback.
  else if (module_exists('logintoboggan') && isset($resources['user']['actions']['login']['callback'])) {
    $resources['user']['actions']['login']['callback'] = 'drupalgap_logintoboggan_services_login';
  }
}

/**
 * Replacement callback for the Services user login resource when the
 * Email Registration module is enabled. Use the email address to login.
 *
 * @see _user_resource_login().
 */
function drupalgap_email_registration_services_login($username, $password) {
  $result = db_query(
    "SELECT name FROM {users} WHERE LOWER(mail) = LOWER(:username)",
    array(':username' => $username)
  )->fetch();
  if (!empty($result->name)) { $username = $result->name; }
  return _user_resource_login($username, $password);
}

/**
 * Replacement callback for the Services user login resource when the
 * LoginToboggan module is enabled. Optionally use the email address to login.
 *
 * @see _user_resource_login().        
 * @see https://drupal.org/node/1431724
 */
function drupalgap_logintoboggan_services_login($username, $password) {
  if (variable_get('logintoboggan_login_with_email', 0)) {
    $result = db_query(
      "SELECT name FROM {users} WHERE LOWER(mail) = LOWER(:username)",
      array(':username' => $username)
    )->fetch();
    if (!empty($result->name)) { $username = $result->name; }
  }
  return _user_resource_login($username, $password);
}

/**
 * Implements hook_services_request_postprocess_alter().
 */
function drupalgap_services_request_postprocess_alter($controller, $args, &$result) {
  switch ($controller['callback']) {
    case '_system_resource_connect':
      // Grab the extras DG provides to system connect and append them to result.
      module_load_include('inc', 'drupalgap', 'drupalgap.resource');
      $extras = drupalgap_system_connect_extras(false);
      foreach($extras as $key => $value) {
        $result->{$key} = $value;
      }
      // If the flag module is enabled, add flag data to the result.
      if (module_exists('flag')) {
        $flags = db_query(" SELECT * FROM {flag} ")->fetchAll();
        if (isset($flags)) {
          $result->flags = array();
          foreach($flags as $flag) {
            $result->flag[$flag->fid] = $flag;
            $result->flag[$flag->fid]->options = unserialize($flag->options);
            $types = db_query(" SELECT type FROM {flag_types} WHERE fid = :fid ", array(':fid' => $flag->fid));
            if (isset($types)) {
              $result->flag[$flag->fid]->types = array();
              foreach($types as $type) {
                $result->flag[$flag->fid]->types[] = $type->type;
              }
            }
          }
        }
      }
      break;
    case '_comment_resource_retrieve':
    case '_comment_resource_index':
      // Iterate over all of the results and pull out node ids and user ids from
      // the comments.
      $nids = null;
      $uids = null;
      if ($controller['callback'] == '_comment_resource_index') {
        $nids = array();
        $uids = array();
        foreach ($result as $i => $comment) {
          if (!in_array($comment->nid, $nids)) { $nids[] = $comment->nid; }
          if (!in_array($comment->uid, $uids)) { $uids[] = $comment->uid; }
        }
      }
      else {
        // We're loading a comment, so just extract the single ids.
        $nids = $result->nid;
        $uids = $result->uid;
      }
      // On the comment retrieve resource, add the bundle to the result, it is
      // stored in the node_tye property.
      if ($controller['callback'] == '_comment_resource_retrieve') {
        $result->bundle = $result->node_type;
      }
      // If user profile pictures are enabled, add the picture uri to the
      // comment result(s).
      if (variable_get('user_pictures', 0)) {
        if ($controller['callback'] == '_comment_resource_retrieve' && $uids != 0) {
          $sql = "SELECT fm.uri, u.uid FROM {file_managed} fm " .
            "INNER JOIN {users} u ON u.picture = fm.fid WHERE u.uid = :uids";
          $picture = db_query($sql, array(':uids' => $uids))->fetch();
          $result->picture_uri = $picture->uri;
        }
        else if (!empty($uids)) {
          $sql = "SELECT fm.uri, u.uid FROM {file_managed} fm " .
            "INNER JOIN {users} u ON u.picture = fm.fid WHERE u.uid IN (:uids)";
          $pictures = db_query($sql, array(':uids' => $uids))->fetchAll();
          foreach ($result as $i => $comment) {
            $uri = null;
            foreach($pictures as $picture) {
              if ($picture->uid == $comment->uid) {
                $uri = $picture->uri;
                break;
              }
            }
            if ($uri) { $result[$i]->picture_uri = $uri; }
          }
        }
      }
      // Let's add any custom fields to the index results.
      if ($controller['callback'] == '_comment_resource_index' && !empty($nids)) {
        // Grab a list of all the nids and their types, then build an array of
        // types keyed by their nid.
        $sql = "SELECT n.nid, n.type FROM {node} n WHERE n.nid IN (:nids)";
        $nids_and_types = db_query($sql, array(':nids' => $nids))->fetchAll();
        $types = array();
        foreach($nids_and_types as $item) {
          $types[$item->nid] = $item->type;
        }
        // Build an array of entities, keyed by the entity id, and attach the
        // bundle to each, so we can load and attach the fields to each. We need
        // to attach the node_type property to comment entities, it is equal to
        // the bundle value, or we won't be able to always load the fields
        // properly.
        $entities = array();
        foreach($result as $i => $comment) {
          $result[$i]->bundle = 'comment_node_' .  $types[$comment->nid];
          $result[$i]->node_type = $result[$i]->bundle;
          $entities[$comment->cid] = $comment;
        }
        if (!empty($entities)) { field_attach_load('comment', $entities); }
      }
      break;
    case '_node_resource_retrieve':
      
      // Grab the field info instances for this node type.
      $instances = field_info_instances('node', $result->type);
      
      // Let's add taxonomy term names along with their ids onto taxonomy term
      // reference fields.
      foreach($instances as $field => $instance) {
        if (
          $instance['widget']['module'] == 'taxonomy' ||
          ($instance['widget']['module'] == 'options' && $instance['display']['default']['module'] == 'taxonomy')
        ) {
          // Determine the field's language from the node, and fall back to
          // 'und' if the field's language isn't set.
          $language = $result->language;
          if (!isset($result->{$field}[$language])) { $language = 'und'; }
          // Extract the term ids.
          $tids = array();
          foreach($result->{$field}[$language] as $delta => $term) {
            $tids[] = $term['tid'];
          }
          if (empty($tids)) { continue; }
          // Grab the term names.
          $sql = "SELECT t.tid, t.name FROM {taxonomy_term_data} t WHERE t.tid IN (:tids)";
          $terms = db_query($sql, array(':tids' => $tids))->fetchAll();
          if (empty($terms)) { continue; }
          foreach($result->{$field}[$language] as $delta => $term) {
            foreach($terms as $_term) {
              if ($term['tid'] == $_term->tid) {
                $result->{$field}[$language][$delta]['name'] = $_term->name;
                break;
              }
            }
          }
        }
      }
      
      // If the entityreference module is enabled, add the entity type,
      // bundle, and title/name/subject/etc to the result set.
      if (module_exists('entityreference')) {
        foreach ($instances as $field => $instance) {
          if (!isset($instance['display']['default']['module'])) { continue; }
          if ($instance['display']['default']['module'] != 'entityreference') { continue; }
          // Extract the entity type and bundle.
          $entity_type = isset($instance['entity_type']) ? $instance['entity_type'] : null;
          $bundle = isset($instance['bundle']) ? $instance['bundle'] : null;
          // Determine the field's language from the node, and fall back to
          // 'und' if the field's language isn't set.
          $language = $result->language;
          if (!isset($result->{$field}[$language])) { $language = 'und'; }
          // Extract the target ids.
          $target_ids = array();
          if (isset($result->{$field}[$language])) {
            foreach($result->{$field}[$language] as $delta => $reference) {
              $target_ids[] = $reference['target_id'];
            }
          }
          if (empty($target_ids)) { continue; }
          // Depending on the entity type, determine the table name and fields
          // to grab from the DB.
          $table = null;
          $column = null;
          $primary_key = null;
          switch ($entity_type) {
            case 'comment': $table = 'comment'; $column = 'subject'; $primary_key = 'cid'; break;
            case 'file': $table = 'file_managed'; $column = 'filename'; $primary_key = 'fid'; break;
            case 'node': $table = 'node'; $column = 'title'; $primary_key = 'nid'; break;
            case 'taxonomy_term': $table = 'taxonomy_term_data'; $column = 'name'; $primary_key = 'tid'; break;
            case 'taxonomy_vocabulary': $table = 'taxonomy_vocabulary'; $column = 'name'; $primary_key = 'vid'; break;
            case 'user': $table = 'users'; $column = 'name'; $primary_key = 'uid'; break;
          }
          if (!isset($table) || !isset($column) || !isset($primary_key)) { continue; }
          // Grab the data, then set them on the corresponding targets.
          $sql = "SELECT $column, $primary_key FROM {" . $table . "} WHERE $primary_key IN (:target_ids)";
          $targets = db_query($sql, array(':target_ids' => $target_ids))->fetchAll();
          //drupal_set_message('<pre>' . print_r($targets, true) . '</pre>');
          foreach($result->{$field}[$language] as $delta => $reference) {
            foreach($targets as $target) {
              if ($reference['target_id'] == $target->{$primary_key}) {
                $result->{$field}[$language][$delta][$column] = $target->{$column};
                $result->{$field}[$language][$delta]['entity_type'] = $entity_type;
                $result->{$field}[$language][$delta]['bundle'] = $bundle;
                break;
              }
            }
          }
        }
      }
      
      break;
  }
}

/**
 *
 */
function drupalgap_system_connect_extras($system_connect_call = true) {
  
  global $user;
  
  $results = array();
  
  if ($system_connect_call) {
    // Make a call to the system connect resource.
    module_load_include('inc', 'services', 'resources/system_resource');
    $results['system_connect'] = _system_resource_connect();
  }
  
  // Grab the date formats and types.
  $results['date_formats'] = system_get_date_formats();
  $results['date_types'] = system_get_date_types();
  
  // Make calls to various DrupalGap resources.
  $results['site_settings'] = _drupalgap_resource_system_site_settings();
  $results['user_permissions'] = _drupalgap_resource_user_permissions(array('uid' => $user->uid));
  $results['content_types_list'] = _drupalgap_resource_content_types_list();
  $results['content_types_user_permissions'] = _drupalgap_resource_content_types_user_permissions();
  $results['entity_info'] = entity_get_info();
  $results['field_info_instances']['node'] = field_info_instances('node');
  $results['field_info_instances']['comment'] = field_info_instances('comment');
  $results['field_info_instances']['taxonomy_vocabulary'] = field_info_instances('taxonomy_vocabulary');
  $results['field_info_instances']['taxonomy_term'] = field_info_instances('taxonomy_term');
  $results['field_info_instances']['user'] = field_info_instances('user');
  $results['field_info_fields'] = field_info_fields();
  $results['field_info_extra_fields'] = array();
  foreach($results['content_types_list'] as $content_type) {
    $results['field_info_extra_fields'][$content_type->type] =
      field_info_extra_fields('node', $content_type->type, 'form');
  }
  $results['taxonomy_vocabularies'] = _drupalgap_taxonomy_get_vocabularies();
  return $results;
}

/**
 * Implements hook_preprocess_views_views_json_style_simple().
 */
function drupalgap_preprocess_views_views_json_style_simple(&$vars) {
  // Place various view object properties and pager data onto the results.
  global $pager_total, $pager_page_array, $pager_total_items, $pager_limits;
  $view = array(
    'name' => $vars['view']->name,
    'display' => $vars['view']->current_display,
    'path' => implode('/', arg()),
    'root' => $vars['options']['root_object'],
    'child' => $vars['options']['top_child_object'],
    'pages' => $pager_total[0],
    'page' => $pager_page_array[0],
    'count' => intval($pager_total_items[0]),
    'limit' => intval($pager_limits[0])
  );
  // If there were no pages, adjust the property values accordingly.
  if ($view['pages'] == null) {
    $view['count'] = sizeof($vars['rows'][$view['root']]);
    $view['limit'] = null;
  }
  // Attach the view data to the rows result.
  $vars['rows']['view'] = $view;
}

/**
 * Implements hook_default_services_endpoint().
 */
function drupalgap_default_services_endpoint() {
  $endpoints = array();
  
  $endpoint = new stdClass();
  $endpoint->disabled = FALSE; /* Edit this to true to make a default endpoint disabled initially */
  $endpoint->api_version = 3;
  $endpoint->name = 'drupalgap';
  $endpoint->server = 'rest_server';
  $endpoint->path = 'drupalgap';
  $endpoint->authentication = array(
    'services' => 'services',
  );
  $endpoint->server_settings = array(
    'formatters' => array(
      'json' => TRUE,
      'bencode' => FALSE,
      'jsonp' => FALSE,
      'php' => FALSE,
      'rss' => FALSE,
      'xml' => FALSE,
    ),
    'parsers' => array(
      'application/json' => TRUE,
      'application/x-www-form-urlencoded' => TRUE,
      'application/xml' => TRUE,
      'multipart/form-data' => TRUE,
      'application/vnd.php.serialized' => FALSE,
      'text/xml' => FALSE,
    ),
  );
  $endpoint->resources = array(
    'drupalgap_content' => array(
      'actions' => array(
        'content_types_list' => array(
          'enabled' => '1',
        ),
        'content_types_user_permissions' => array(
          'enabled' => '1',
        ),
      ),
    ),
    'drupalgap_system' => array(
      'actions' => array(
        'site_settings' => array(
          'enabled' => '1',
        ),
        'connect' => array(
          'enabled' => '1',
        ),
      ),
    ),
    'drupalgap_taxonomy' => array(
      'actions' => array(
        'get_vocabularies' => array(
          'enabled' => '1',
        ),
        'get_terms' => array(
          'enabled' => '1',
        ),
      ),
    ),
    'drupalgap_user' => array(
      'actions' => array(
        'access' => array(
          'enabled' => '1',
        ),
        'login' => array(
          'enabled' => '1',
        ),
        'logout' => array(
          'enabled' => '1',
        ),
        'register' => array(
          'enabled' => '1',
        ),
        'roles_and_permissions' => array(
          'enabled' => '1',
        ),
        'permissions' => array(
          'enabled' => '1',
        ),
      ),
    ),
    'comment' => array(
      'operations' => array(
        'create' => array(
          'enabled' => '1',
        ),
        'retrieve' => array(
          'enabled' => '1',
        ),
        'update' => array(
          'enabled' => '1',
        ),
        'delete' => array(
          'enabled' => '1',
        ),
        'index' => array(
          'enabled' => '1',
        ),
      ),
      'actions' => array(
        'countAll' => array(
          'enabled' => '1',
        ),
      ),
    ),
    'file' => array(
      'operations' => array(
        'create' => array(
          'enabled' => '1',
        ),
        'retrieve' => array(
          'enabled' => '1',
        ),
        'delete' => array(
          'enabled' => '1',
        ),
        'index' => array(
          'enabled' => '1',
        ),
      ),
    ),
    'node' => array(
      'operations' => array(
        'retrieve' => array(
          'enabled' => '1',
        ),
        'create' => array(
          'enabled' => '1',
        ),
        'update' => array(
          'enabled' => '1',
        ),
        'delete' => array(
          'enabled' => '1',
        ),
        'index' => array(
          'enabled' => '1',
        ),
      ),
    ),
    'system' => array(
      'actions' => array(
        'connect' => array(
          'enabled' => '1',
        ),
        'get_variable' => array(
          'enabled' => '1',
        ),
        'set_variable' => array(
          'enabled' => '1',
        ),
        'del_variable' => array(
          'enabled' => '1',
        ),
      ),
    ),
    'taxonomy_term' => array(
      'operations' => array(
        'retrieve' => array(
          'enabled' => '1',
        ),
        'create' => array(
          'enabled' => '1',
        ),
        'update' => array(
          'enabled' => '1',
        ),
        'delete' => array(
          'enabled' => '1',
        ),
        'index' => array(
          'enabled' => '1',
        ),
      ),
      'actions' => array(
        'selectNodes' => array(
          'enabled' => '1',
        ),
      ),
    ),
    'taxonomy_vocabulary' => array(
      'operations' => array(
        'retrieve' => array(
          'enabled' => '1',
        ),
        'create' => array(
          'enabled' => '1',
        ),
        'update' => array(
          'enabled' => '1',
        ),
        'delete' => array(
          'enabled' => '1',
        ),
        'index' => array(
          'enabled' => '1',
        ),
      ),
      'actions' => array(
        'getTree' => array(
          'enabled' => '1',
        ),
      ),
    ),
    'user' => array(
      'operations' => array(
        'retrieve' => array(
          'enabled' => '1',
        ),
        'create' => array(
          'enabled' => '1',
        ),
        'update' => array(
          'enabled' => '1',
        ),
        'delete' => array(
          'enabled' => '1',
        ),
        'index' => array(
          'enabled' => '1',
        ),
      ),
      'actions' => array(
        'login' => array(
          'enabled' => '1',
          'settings' => array(
            'services' => array(
              'resource_api_version' => '1.0',
            ),
          ),
        ),
        'logout' => array(
          'enabled' => '1',
          'settings' => array(
            'services' => array(
              'resource_api_version' => '1.0',
            ),
          ),
        ),
        'register' => array(
          'enabled' => '1',
        ),
      ),
    ),
  );
  $endpoint->debug = 0;

  $endpoints[] = $endpoint;

  return $endpoints;
}

